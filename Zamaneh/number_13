SELECT 
	MAX(wrE19."Project Org Code") AS c0,
	MAX(wrE19."Project Code") AS c1,
	MAX(wrE19."Task Number") AS c2,
	MAX(wrE19."Task Name") AS c3,
	MAX(wrE19."Transaction Date") AS c4,
	MAX(wrE19."Billable Amount") AS c5,
	MAX(wrE19."Postings - Unbilled") AS c6,
	MAX(wrE19."Postings - Billed") AS c7,
	MAX(wrE19."Postings - Deferred") AS c8,
	MAX(wrE19."Postings - Revenue") AS c9,
	SUM(wrE19."Billable Amount") AS c10,
	SUM(wrE19."Postings - Unbilled") AS c11,
	SUM(wrE19."Postings - Billed") AS c12,
	SUM(wrE19."Postings - Deferred") AS c13,
	SUM(wrE19."Postings - Revenue") AS c14,
	MAX(wrE6."Project Key") AS c15,
	MAX(wrE19."Transaction Data Key") AS c16,
	MAX(wrE19."Transaction Type") AS c17,
	MAX(wrE19."Cost Element") AS c18,
	MAX(wrE19."Cost Amount") AS c19
FROM (with fi_write_off as ( select it.fin_document_detail_key fin_document_detail_key, sum(case when i.voided_invoice_key is not null then -it.writeoff_quantity else it.writeoff_quantity end) write_off_quantity from invcd_document_labor it join invoice i on i.invoice_key = it.invoice_key and i.completed_date is not null group by it.fin_document_detail_key ), fl_write_off as ( select it.fin_document_detail_key fin_document_detail_key, sum(case when i.voided_invoice_key is not null then -it.writeoff_quantity else it.writeoff_quantity end) write_off_quantity from invcd_document_labor it join invoice i on i.invoice_key = it.invoice_key and i.completed_date is not null group by it.fin_document_detail_key ), l_write_off as ( select it.time_data_key time_data_key, sum( case when i.voided_invoice_key is not null then -it.writeoff_quantity else it.writeoff_quantity end) write_off_quantity from invcd_time it  join invoice i on i.invoice_key = it.invoice_key and i.completed_date is not null group by it.time_data_key ) select x.transaction_data_key          as "Transaction Data Key", x.timesheet_key                 as "Timesheet Key", x.expense_report_key            as "Expense Report Key", x.fin_document_key              as "Financial Document Key", x.project_key               	as "Project Key", x.person_key                	as "Person Key", x.task_key                  	as "Task Key", porg.customer_key           	as "Project Organization Key", own.customer_key            	as "Project Owning Org Key", x.cust_invoice_key          	as "Customer Invoice Key", x.vendor_invoicing_key      	as "Vendor Invoicing Key",  CASE when proj_indicator.project_key is not null then 'Primary' when alternate_indicator.project_key is not null then 'Alternate' else '' end                             as "Primary or Alternate Project",  porg.customer_code          as "Project Org Code", porg.customer_name          as "Project Org Name", own.customer_code           as "Project Owning Org Code", own.customer_name           as "Project Owning Org Name", cle.customer_code           as "Legal Entity Code", cle.customer_name           as "Legal Entity Name", p.project_code              as "Project Code", p.title                     as "Project Title", pttr.billable               as "Billable Indicator", per.last_name               as "Person Last Name", per.first_name              as "Person First Name", per.middle_initial          as "Person Middle Initial", per.username                as "Person Username", pttr.project_type           as "Transaction Project Type", case when pttr.billable = 'Y' then case when t.billing_type_key is not null then btt.code else btp.code end else 'NB' end                         as "Transaction Billing Type", x.trans_date                as "Transaction Date", x.ts_adjustment_number      as "TS Adjustment Number", x.ts_adjustment_status      as "TS Adjustment Status", x.transaction_type          as "Transaction Type", x.source_doc_type           as "Source Doc Type", x.source_doc_status         as "Source Doc Status", x.source_doc_number         as "Source Doc Number", x.er_completion_date        as "ER Completion Date", x.ts_or_er_posted_date      as "TS or ER Posted Date", x.comments_description      as "Comments", t.task_number               as "Task Number", t.task_name                 as "Task Name", lc.labor_category           as "Labor Category",  case when (x.transaction_type = 'Fee Cap Adjustments') then x.cost_element when (x.transaction_type = 'Fixed Price Items') then x.comments_description when (x.transaction_type = 'Additional Items') then x.comments_description else lc.description end 						as "Labor Category Description",  x.expense_type              as "Expense Type", inv.invoice_number          as "Customer Invoicing Number", x.document_number         	as "Vendor Invoicing Number", case when (x.postings_cost is not null and x.postings_cost <> 0) then x.post_date_cost else null end                         as "Post Date - Cost", case when (x.postings_unbilled is not null and x.postings_unbilled <> 0) then x.post_date_unbilled else null end                         as "Post Date - Unbilled", case when (x.postings_billed is not null and x.postings_billed <> 0) then x.post_date_billed else null end                         as "Post Date - Billed", case when (x.postings_deferred is not null and x.postings_deferred <> 0) then x.post_date_deferred_rev else null end                         as "Post Date - Deferred Revenue", case when (x.postings_revenue is not null and x.postings_revenue <> 0) then x.post_date_recognized_rev else null end                         as "Post Date - Recognized Revenue", x.quantity_cost             as "Quantity - Cost", case when      pttr.billable='Y' then    x.quantity_net_billable else    null end 						as "Quantity - Net Billable", X.quantity_writeoff         as "Quantity - WriteOff", x.item_code                 as "Item Code", x.item_name                 as "Item Name", x.item_uom                  as "Item UOM", case when exists(select null from member where person_key = '3896' and role_key in (1,21,10)) then    round(x.cost_amount,ccc.decimals) else        null end                             as "Cost Amount", case when exists(select null from member where person_key = '3896' and role_key in (1,21,16)) then    round(x.bill_amount,bcc.decimals) else        null end                             as "Bill Amount", case when exists(select null from member where person_key = '3896' and role_key in (1,21,16)) and     pttr.billable='Y' then    round(x.billable_amount,bcc.decimals) else    null end                             as "Billable Amount", x.postings_writeoff             as "Postings - Writeoff", x.postings_unbilled             as "Postings - Unbilled", x.postings_billed               as "Postings - Billed", x.postings_deferred             as "Postings - Deferred", x.postings_revenue              as "Postings - Revenue", x.postings_cost                 as "Postings - Cost", case when exists(select null from member where person_key = '3896' and role_key in (1,21,16)) then    x.bill_rate else        null end                             as "Bill Rate", case when exists(select null from member where person_key = '3896' and role_key in (1,21,10)) then    x.cost_rate else        null end                             as "Cost Rate", x.cost_element                  as "Cost Element", x.cost_element_desc             as "Cost Element Description", case x.cost_element_type when 'O' then 'ODC' when 'L' then 'Labor' when 'P'    then 'Indirect' when 'Fee'  then 'Fee' else '' end                             as "Cost Element Type", x.cost_structure                as "Cost Structure", x.posted_indicator              as "Posted Indicator", x.account_key					as "GL Account Key", ccc.iso_currency_code           as "Transaction Currency Code", bcc.iso_currency_code           as "Billing Currency Code", x.ic_cost_amount                as "Intercompany Cost Amount", ic_ccc.iso_currency_code        as "Intercompany Currency Code"  from ( select ptd.time_data_key           transaction_data_key, pt.person_time_key			timesheet_key, cast(null as decimal(15))   expense_report_key, cast(null as decimal(15))	fin_document_key, ptd.project_key             project_key, pt.person_key               person_key, ptd.task_key                task_key, ptd.labor_category_key      labor_category_key, ptd.invoice_key cust_invoice_key, fdvi.fin_document_key       vendor_invoicing_key, fdvi.document_number 		document_number, ptd.project_type_key        trans_project_type_key, ptd.work_date               trans_date, ptd.adjusted_number         ts_adjustment_number, pt.adjustment_status        ts_adjustment_status, 'Labor'                     transaction_type, 'TS'                        source_doc_type, pt.status                   source_doc_status, cast(pt.person_time_key as varchar(15)) source_doc_number, cast(null as date)			er_completion_date, ptd.post_date               ts_or_er_posted_date, ptd.comments                comments_description, null                        expense_type, ph.journal_trans_date			post_date_cost, jv.post_date_unbilled           post_date_unbilled, jv.post_date_billed           	post_date_billed, jv.post_date_deferred_rev       post_date_deferred_rev, jv.post_date_recognized_rev     post_date_recognized_rev, ptd.quantity                quantity_cost, coalesce(ptd.quantity - wv.write_off_quantity,ptd.quantity) quantity_net_billable, wv.write_off_quantity               quantity_writeoff, null                                item_code, null                                item_name, null                                item_uom, ptd.bill_amount                     bill_amount, ptd.cost_amount                     cost_amount, ptd.bill_amount                     billable_amount, jv.posted_cost                      postings_cost, jv.unbilled                         postings_unbilled, jv.billed                           postings_billed, jv.deferred                         postings_deferred, jv.revenue                          postings_revenue, jv.write_off                        postings_writeoff, ptd.eff_bill_rate                   bill_rate, coalesce(ptd.eff_cost_rate - ptd.additional_pay, ptd.eff_cost_rate) cost_rate, ce.code                             cost_element, ce.description                      cost_element_desc, ce.cost_element_type                cost_element_type, cs.cost_structure                   cost_structure, case when coalesce(ptd.post_history_key, ptd.cost_post_history_key) is null then 'N' else 'Y' end                                 posted_indicator, coalesce(jv.account_key, null) 						account_key,  ptd.ic_cost_amount                  ic_cost_amount, ptd.ic_cost_currency                ic_cost_currency, ptd.cost_currency                   cost_currency, ptd.bill_currency                   bill_currency from person_time_data ptd  join            person_time         pt      on pt.person_time_key = ptd.person_time_key left outer join post_history        ph      on ph.post_history_key = ptd.cost_post_history_key left outer join vendor_invoice      vi      on vi.fin_document_key = ptd.vendor_invoice_key left outer join fin_document        fdvi    on fdvi.fin_document_key = vi.fin_document_key  left outer join cost_struct_labor   csl     on csl.cost_struct_labor_key = ptd.cost_struct_labor_key left outer join cost_struct         cs      on cs.cost_struct_key = csl.cost_struct_key left outer join cost_element        ce      on ce.cost_element_key = csl.cost_element_key  left outer join ( select j.time_data_key         time_data_key,  max(case when j.category = 5 then j.journal_trans_date end)      post_date_unbilled, max(case when j.category = 1 then j.journal_trans_date end)      post_date_billed, max(case when j.category = 2 then j.journal_trans_date end)      post_date_deferred_rev, max(case when j.category = 3 then j.journal_trans_date end)      post_date_recognized_rev,  sum(case when j.category = 5 then j.amount end) unbilled, sum(case when j.category = 1 then j.amount end) billed, sum(case when j.category = 2 then j.amount end) as deferred, sum(case when j.category = 3 then j.amount end) revenue, sum(case when j.category = 9 then j.amount end) write_off, sum(case when j.category = 6 then j.amount end) posted_cost, max(j.account_key)								account_key from journal_time j group by j.time_data_key ) jv on jv.time_data_key = ptd.time_data_key left outer join l_write_off wv on wv.time_data_key = ptd.time_data_key  union all select max(ptd.time_data_key)      transaction_data_key, max(pt.person_time_key)     timesheet_key, null                        expense_report_key, null 	                    fin_document_key, max(ptd.project_key)        project_key, max(pt.person_key)          person_key, max(ptd.task_key)           task_key, max(ptd.labor_category_key) labor_category_key, max(cppd.invoice_key)        cust_invoice_key, null                        vendor_invoicing_key, null 						document_number, max(ptd.project_type_key)   trans_project_type_key, max(ptd.work_date)          trans_date, max(ptd.adjusted_number)    ts_adjustment_number, max(pt.adjustment_status)   ts_adjustment_status, 'Labor'                     transaction_type, 'TS'                        source_doc_type, max(pt.status)              source_doc_status, max(cast(pt.person_time_key as varchar(15))) source_doc_number, null                        er_completion_date, max(ptd.post_date)          ts_or_er_posted_date, max(ptd.comments)           comments_description, null                        expense_type, max(ph.journal_trans_date)	   post_date_cost, max(case when j.category = 5 then j.journal_trans_date end)      post_date_unbilled, max(case when j.category = 1 then j.journal_trans_date end)      post_date_billed, max(case when j.category = 2 then j.journal_trans_date end)      post_date_deferred_rev, max(case when j.category = 3 then j.journal_trans_date end)      post_date_recognized_rev, max(ptd.quantity)                        quantity_cost, max(coalesce(ptd.quantity - wv.write_off_quantity,ptd.quantity))                        quantity_net_billable, null                        quantity_writeoff, null                        item_code, null                        item_name, null                        item_uom, max(ptd.bill_amount)        bill_amount, max(ptd.cost_amount)        cost_amount, null                        billable_amount, null                                                postings_cost, sum(case when j.category = 5 then j.amount end)     postings_unbilled, sum(case when j.category = 1 then j.amount end)     postings_billed, sum(case when j.category = 2 then j.amount end)     postings_deferred, sum(case when j.category = 3 then j.amount end)     postings_revenue, sum(case when j.category = 9 then j.amount end)     postings_writeoff, null                                bill_rate, null                                cost_rate, coalesce(ce.code, fm.fee_method)    cost_element, max(coalesce(ce.description, fm.fee_method)) cost_element_desc, max(case when ce.cost_element_type is null then 'Fee' else ce.cost_element_type end)                            cost_element_type, max(cs.cost_structure)              cost_structure, max(case when coalesce(ptd.post_history_key, ptd.cost_post_history_key) is null then 'N' else 'Y' end)                                posted_indicator, max(j.account_key)					account_key, max(ptd.ic_cost_amount)             ic_cost_amount, max(ptd.ic_cost_currency)           ic_cost_currency, max(ptd.cost_currency)              cost_currency, max(ptd.bill_currency)              bill_currency from journal_cost_plus_detail j join            cost_plus_post_detail   cppd    on cppd.cost_plus_post_detail_key = j.cost_plus_post_detail_key join            person_time_data        ptd     on ptd.time_data_key = cppd.time_data_key join            person_time             pt      on pt.person_time_key = ptd.person_time_key  left outer join post_history            ph      on ph.post_history_key = cppd.post_history_key left outer join fee_method              fm      on fm.fee_method_key = cppd.fee_method_key left outer join cost_struct_odc         cso     on cso.cost_struct_odc_key = ptd.cost_struct_labor_key left outer join cost_struct             cs      on cs.cost_struct_key = cso.cost_struct_key left outer join cost_element            ce      on ce.cost_element_key = cppd.cost_element_key left outer join l_write_off wv on wv.time_data_key = ptd.time_data_key group by cppd.time_data_key, coalesce(ce.code, fm.fee_method) union all select eda.expense_data_allocation_key transaction_data_key, null			                timesheet_key, er.expense_report_key           expense_report_key, null 	                        fin_document_key, eda.project_key             project_key, er.owner_key                person_key, eda.task_key                task_key, null                        labor_category_key, eda.invoice_key 			cust_invoice_key, fdvi.fin_document_key       vendor_invoicing_key, fdvi.document_number 		document_number, eda.project_type_key        trans_project_type_key, ed.expense_date             trans_date, null                        ts_adjustment_number, null                        ts_adjustment_status, 'Expense Reports'           transaction_type, 'ER'                        source_doc_type, er.status                   source_doc_status, cast(er.expense_report_key  as varchar(15)) source_doc_number, er.date_completed           er_completion_date, er.post_date                ts_or_er_posted_date, concat(concat(ed.comments, ' '),ed.summary) comments_description, coalesce(et.expense_type_name, et.expense_type) expense_type, ph.journal_trans_date			post_date_cost, jv.post_date_unbilled           post_date_unbilled, jv.post_date_billed           	post_date_billed, jv.post_date_deferred_rev       post_date_deferred_rev, jv.post_date_recognized_rev     post_date_recognized_rev, null                        quantity_cost, null                        quantity_net_billable, null                        quantity_writeoff, null                        item_code, null                        item_name, null                        item_uom, eda.bill_amount             bill_amount, eda.amount                  cost_amount, eda.bill_amount             billable_amount, jv.posted_cost              postings_cost, jv.unbilled                 postings_unbilled, jv.billed                   postings_billed, jv.deferred                 postings_deferred, jv.revenue                  postings_revenue, jv.write_off                postings_writeoff, null                        bill_rate, null                        cost_rate, ce.code                     cost_element, ce.description              cost_element_desc, ce.cost_element_type        cost_element_type, cs.cost_structure           cost_structure, case when coalesce(eda.post_history_key, eda.cost_post_history_key) is null then 'N' else 'Y' end                         posted_indicator, jv.account_key				account_key, eda.ic_cost_amount          ic_cost_amount, eda.ic_cost_currency        ic_cost_currency, er.currency                 cost_currency, eda.bill_currency           bill_currency from expense_data_allocation eda  join            expense_data        ed      on ed.expense_data_key = eda.expense_data_key join            expense_type        et      on et.expense_type_key = ed.expense_type_key join            expense_report      er      on er.expense_report_key = ed.expense_report_key and et.expense_type not in ('ADVANCE', 'CASH-RETURN') left outer join post_history        ph      on ph.post_history_key = eda.cost_post_history_key left outer join vendor_invoice      vi      on vi.fin_document_key = eda.vendor_invoice_key left outer join fin_document        fdvi    on fdvi.fin_document_key = vi.fin_document_key  left outer join cost_struct_odc     cso     on cso.cost_struct_odc_key = eda.cost_struct_odc_key left outer join cost_struct         cs      on cs.cost_struct_key = cso.cost_struct_key left outer join cost_element        ce      on ce.cost_element_key = cso.cost_element_key left outer join ( select j.expense_data_allocation_key   expense_data_allocation_key, max(case when j.category = 5 then j.journal_trans_date end)      post_date_unbilled, max(case when j.category = 1 then j.journal_trans_date end)      post_date_billed, max(case when j.category = 2 then j.journal_trans_date end)      post_date_deferred_rev, max(case when j.category = 3 then j.journal_trans_date end)      post_date_recognized_rev, sum(case when j.category = 5 then j.amount end) unbilled, sum(case when j.category = 1 then j.amount end) billed, sum(case when j.category = 2 then j.amount end) as deferred, sum(case when j.category = 3 then j.amount end) revenue, sum(case when j.category = 9 then j.amount end) write_off, sum(case when j.category = 18 then j.amount end) posted_cost, max(j.account_key)								account_key from journal_expense j group by j.expense_data_allocation_key ) jv on jv.expense_data_allocation_key = eda.expense_data_allocation_key union all select max(eda.expense_data_allocation_key)    transaction_data_key, null			                        timesheet_key, max(er.expense_report_key)              expense_report_key, null 	                                fin_document_key, max(eda.project_key)                    project_key, max(er.owner_key)                       person_key, max(eda.task_key)                       task_key, null                                    labor_category_key, max(cppd.invoice_key)		 cust_invoice_key, null                        vendor_invoicing_key, null 						document_number, max(eda.project_type_key)   trans_project_type_key, max(ed.expense_date)        trans_date, null                        ts_adjustment_number, null                        ts_adjustment_status, 'Expense Reports'           transaction_type, 'ER'                        source_doc_type, max(er.status)              source_doc_status, max(cast(er.expense_report_key  as varchar(15))) source_doc_number, max(er.date_completed)           er_completion_date, max(er.post_date)                ts_or_er_posted_date, max(concat(concat(ed.comments, ' '),ed.summary)) comments_description, max(coalesce(et.expense_type_name, et.expense_type)) expense_type, max(ph.journal_trans_date)	   post_date_cost, max(case when j.category = 5 then j.journal_trans_date end)      post_date_unbilled, max(case when j.category = 1 then j.journal_trans_date end)      post_date_billed, max(case when j.category = 2 then j.journal_trans_date end)      post_date_deferred_rev, max(case when j.category = 3 then j.journal_trans_date end)      post_date_recognized_rev, null                        quantity_cost, null                        quantity_net_billable, null                        quantity_writeoff, null                        item_code, null                        item_name, null                        item_uom, max(eda.bill_amount )       bill_amount, max(eda.amount )            cost_amount, null                        billable_amount, null                                                postings_cost, sum(case when j.category = 5 then j.amount end)     postings_unbilled, sum(case when j.category = 1 then j.amount end)     postings_billed, sum(case when j.category = 2 then j.amount end)     postings_deferred, sum(case when j.category = 3 then j.amount end)     postings_revenue, sum(case when j.category = 9 then j.amount end)     postings_writeoff, null                                bill_rate, null                                cost_rate, coalesce(ce.code, fm.fee_method)    cost_element, max(coalesce(ce.description, fm.fee_method)) cost_element_desc, max(case when ce.cost_element_type is null then 'Fee' else ce.cost_element_type end)                            cost_element_type, max(cs.cost_structure)              cost_structure, max(case when coalesce(eda.post_history_key, eda.cost_post_history_key) is null then 'N' else 'Y' end)                                posted_indicator, max(j.account_key)					account_key, max(eda.ic_cost_amount)             ic_cost_amount, max(eda.ic_cost_currency)           ic_cost_currency, max(er.currency)                    cost_currency, max(eda.bill_currency)              bill_currency from journal_cost_plus_detail j join            cost_plus_post_detail   cppd    on cppd.cost_plus_post_detail_key = j.cost_plus_post_detail_key join            expense_data_allocation eda     on eda.expense_data_allocation_key = cppd.expense_data_allocation_key join            expense_data            ed      on ed.expense_data_key = eda.expense_data_key join            expense_type            et      on et.expense_type_key = ed.expense_type_key join            expense_report          er      on er.expense_report_key = ed.expense_report_key  left outer join post_history            ph      on ph.post_history_key = cppd.post_history_key left outer join fee_method              fm      on fm.fee_method_key = cppd.fee_method_key  left outer join cost_struct_odc         cso     on cso.cost_struct_odc_key = eda.cost_struct_odc_key left outer join cost_struct             cs      on cs.cost_struct_key = cso.cost_struct_key left outer join cost_element            ce      on ce.cost_element_key = cppd.cost_element_key  group by cppd.expense_data_allocation_key, coalesce(ce.code, fm.fee_method) union all  select fdd.fin_document_detail_key transaction_data_key, null			            timesheet_key, null                        expense_report_key, fd.fin_document_key	        fin_document_key, fddpl.project_key           project_key, fdd.person_key              person_key, fddpl.task_key              task_key, fddpl.labor_category_key    labor_category_key, fddl.invoice_key 			cust_invoice_key, fdvi.fin_document_key       vendor_invoicing_key, fdvi.document_number 		document_number, fddpl.project_type_key      trans_project_type_key, fdd.transaction_date        trans_date, null                        ts_adjustment_number, null                        ts_adjustment_status, 'Financial Labor'           transaction_type, case fd.document_type when 0  then 'VI' when 1  then 'VP' when 3  then 'CP' when 4  then 'D' when 5  then 'JE' when 6  then 'BR' when 7  then 'CI' when 8  then 'LC' when 9  then 'EC' when 10 then 'FY' when 11 then 'AL' when 12 then 'CMT' else         null end                         source_doc_type, fd.status                   source_doc_status, fd.document_number          source_doc_number, null                        er_completion_date, null                        ts_or_er_posted_date, fdd.description             comments_description, null                        expense_type, fd.post_date					post_date_cost, jv.post_date_unbilled           post_date_unbilled, jv.post_date_billed           	post_date_billed, jv.post_date_deferred_rev       post_date_deferred_rev, jv.post_date_recognized_rev     post_date_recognized_rev, fddpl.hours                 quantity_cost, coalesce(fddpl.hours - wv.write_off_quantity, fddpl.hours) quantity_net_billable, wv.write_off_quantity       quantity_writeoff, null                        item_code, null                        item_name, null                        item_uom, fddl.bill_amount            bill_amount, fddl.amount                 cost_amount, fddl.bill_amount            billable_amount, fddl.amount                 postings_cost, jv.unbilled                 postings_unbilled, jv.billed                   postings_billed, jv.deferred                 postings_deferred, jv.revenue                  postings_revenue, jv.write_off                postings_writeoff, fddl.bill_rate              bill_rate, fddpl.cost_rate             cost_rate, ce.code                     cost_element, ce.description              cost_element_desc, ce.cost_element_type        cost_element_type, cs.cost_structure           cost_structure, case when fddl.post_history_key is null then 'N' else 'Y' end                         posted_indicator, fdd.account_key				account_key, null                        ic_cost_amount, null                        ic_cost_currency, fd.currency                 cost_currency, fddl.bill_currency          bill_currency from fin_document_detail fdd join            fin_document                    fd      on fd.fin_document_key = fdd.fin_document_key join            fin_document_det_proj_labor     fddpl   on fddpl.fin_document_detail_key = fdd.fin_document_detail_key left outer join fin_document_detail_labor       fddl    on fddl.fin_document_detail_key = fdd.fin_document_detail_key  left outer join post_history        ph      on ph.post_history_key = fddl.post_history_key left outer join vendor_invoice      vi      on vi.fin_document_key = fd.fin_document_key left outer join fin_document        fdvi    on fdvi.fin_document_key = vi.fin_document_key left outer join cost_struct_labor   csl     on csl.cost_struct_labor_key = fddl.cost_struct_labor_key left outer join cost_struct         cs      on cs.cost_struct_key = csl.cost_struct_key left outer join cost_element        ce      on ce.cost_element_key = csl.cost_element_key   left outer join ( select j.fin_document_detail_key   fin_document_detail_key, max(case when j.category = 5 then j.journal_trans_date end)      post_date_unbilled, max(case when j.category = 1 then j.journal_trans_date end)      post_date_billed, max(case when j.category = 2 then j.journal_trans_date end)      post_date_deferred_rev, max(case when j.category = 3 then j.journal_trans_date end)      post_date_recognized_rev, sum(case when j.category = 5 then j.amount end) unbilled, sum(case when j.category = 1 then j.amount end) billed, sum(case when j.category = 2 then j.amount end) as deferred, sum(case when j.category = 3 then j.amount end) revenue, sum(case when j.category = 9 then j.amount end) write_off from journal_document_labor j group by j.fin_document_detail_key ) jv on jv.fin_document_detail_key = fdd.fin_document_detail_key  left outer join fl_write_off wv on wv.fin_document_detail_key = fdd.fin_document_detail_key  union all select max(fdd.fin_document_detail_key)    transaction_data_key, null			                    timesheet_key, null                                expense_report_key, max(fd.fin_document_key)	        fin_document_key, max(fddpl.project_key)              project_key, max(fdd.person_key)                 person_key, max(fddpl.task_key)                 task_key, max(fddpl.labor_category_key)       labor_category_key, max(cppd.invoice_key)               cust_invoice_key, max(fdvi.fin_document_key)          vendor_invoicing_key, max(fdvi.document_number)           document_number, max(fddpl.project_type_key) trans_project_type_key, max(fdd.transaction_date)   trans_date, null                        ts_adjustment_number, null                        ts_adjustment_status, 'Financial Labor'           transaction_type, max(case fd.document_type when 0  then 'VI' when 1  then 'VP' when 3  then 'CP' when 4  then 'D' when 5  then 'JE' when 6  then 'BR' when 7  then 'CI' when 8  then 'LC' when 9  then 'EC' when 10 then 'FY' when 11 then 'AL' when 12 then 'CMT' else         null end)                        source_doc_type, max(fd.status)              source_doc_status, max(fd.document_number)     source_doc_number, null                        er_completion_date, null                        ts_or_er_posted_date, max(fdd.description)        comments_description, null                        expense_type, max(fd.post_date)			   post_date_cost, max(case when j.category = 5 then j.journal_trans_date end)      post_date_unbilled, max(case when j.category = 1 then j.journal_trans_date end)      post_date_billed, max(case when j.category = 2 then j.journal_trans_date end)      post_date_deferred_rev, max(case when j.category = 3 then j.journal_trans_date end)      post_date_recognized_rev, max(fddpl.hours)                        quantity_cost, max(coalesce(fddpl.hours - wv.write_off_quantity, fddpl.hours))                        quantity_net_billable, null                        quantity_writeoff, null                        item_code, null                        item_name, null                        item_uom, max(fddl.bill_amount)       bill_amount, max(fddl.amount)            cost_amount, null                        billable_amount, null                                                postings_cost, sum(case when j.category = 5 then j.amount end)     postings_unbilled, sum(case when j.category = 1 then j.amount end)     postings_billed, sum(case when j.category = 2 then j.amount end)     postings_deferred, sum(case when j.category = 3 then j.amount end)     postings_revenue, sum(case when j.category = 9 then j.amount end)     postings_writeoff, null                                bill_rate, null                                cost_rate, coalesce(ce.code, fm.fee_method)    cost_element, max(coalesce(ce.description, fm.fee_method)) cost_element_desc, max(case when ce.cost_element_type is null then 'Fee' else ce.cost_element_type end)                            cost_element_type, max(cs.cost_structure)              cost_structure, max(case when fddl.post_history_key is null then 'N' else 'Y' end)                                posted_indicator, max(fdd.account_key)				account_key,  null                                ic_cost_amount, null                                ic_cost_currency, max(fd.currency)                    cost_currency, max(fddl.bill_currency)             bill_currency from journal_cost_plus_detail j join            cost_plus_post_detail       cppd    on cppd.cost_plus_post_detail_key = j.cost_plus_post_detail_key join            fin_document_detail_labor   fddl    on fddl.fin_document_detail_key = cppd.fin_document_det_labor_key join            fin_document_detail         fdd     on fdd.fin_document_detail_key = fddl.fin_document_detail_key join            fin_document_det_proj_labor fddpl   on fddpl.fin_document_detail_key = fdd.fin_document_detail_key join            fin_document                fd      on fd.fin_document_key = fdd.fin_document_key left outer join vendor_invoice              vi      on vi.fin_document_key = fd.fin_document_key left outer join fin_document                fdvi    on fdvi.fin_document_key = vi.fin_document_key left outer join post_history        ph      on ph.post_history_key = fddl.post_history_key left outer join fee_method          fm      on fm.fee_method_key = cppd.fee_method_key left outer join cost_struct_labor   csl     on csl.cost_struct_labor_key = fddl.cost_struct_labor_key left outer join cost_struct         cs      on cs.cost_struct_key = csl.cost_struct_key left outer join cost_element        ce      on ce.cost_element_key = cppd.cost_element_key left outer join fl_write_off wv on wv.fin_document_detail_key = fdd.fin_document_detail_key  group by cppd.fin_document_det_labor_key, coalesce(ce.code, fm.fee_method) union all select fdd.fin_document_detail_key transaction_data_key, null			            timesheet_key, null                        expense_report_key, fd.fin_document_key	        fin_document_key,  fddpe.project_key           project_key, fdd.person_key              person_key, fddpe.task_key              task_key, null                        labor_category_key, fdde.invoice_key 			cust_invoice_key, fdvi.fin_document_key       vendor_invoicing_key, fdvi.document_number 		document_number, fddpe.project_type_key      trans_project_type_key, fdd.transaction_date        trans_date, null                        ts_adjustment_number, null                        ts_adjustment_status, 'Financial Expenses'        transaction_type, case fd.document_type when 0  then 'VI' when 1  then 'VP' when 3  then 'CP' when 4  then 'D' when 5  then 'JE' when 6  then 'BR' when 7  then 'CI' when 8  then 'LC' when 9  then 'EC' when 10 then 'FY' when 11 then 'AL' when 12 then 'CMT' else         null end                         source_doc_type, fd.status                   source_doc_status, fd.document_number          source_doc_number, null                        er_completion_date, null                        ts_or_er_posted_date, fdd.description             comments_description, et.expense_type_name        expense_type, fd.post_date					post_date_cost, jv.post_date_unbilled           post_date_unbilled, jv.post_date_billed           	post_date_billed, jv.post_date_deferred_rev       post_date_deferred_rev, jv.post_date_recognized_rev     post_date_recognized_rev, null                        quantity_cost, null                        quantity_net_billable, null                        quantity_writeoff, null                        item_code, null                        item_name, null                        item_uom, fdde.bill_amount            bill_amount, fdde.amount                 cost_amount, fdde.bill_amount            billable_amount, fdde.amount                 postings_cost, jv.unbilled                 postings_unbilled, jv.billed                   postings_billed, jv.deferred                 postings_deferred, jv.revenue                  postings_revenue, jv.write_off                postings_writeoff, null                        bill_rate, null                        cost_rate, ce.code                     cost_element, ce.description              cost_element_desc, ce.cost_element_type        cost_element_type, cs.cost_structure           cost_structure, case when fdde.post_history_key is null then 'N' else 'Y' end                         posted_indicator, fdd.account_key				account_key, null                        ic_cost_amount, null                        ic_cost_currency, fd.currency                 cost_currency, fdde.bill_currency          bill_currency from fin_document_detail fdd join            fin_document                    fd      on fd.fin_document_key = fdd.fin_document_key join            fin_document_det_proj_expense   fddpe   on fddpe.fin_document_detail_key = fdd.fin_document_detail_key left outer join fin_document_detail_expense		fdde    on fdde.fin_document_detail_key = fdd.fin_document_detail_key  left outer join cost_struct_odc     cso     on cso.cost_struct_odc_key = fdde.cost_struct_odc_key left outer join cost_struct         cs      on cs.cost_struct_key = cso.cost_struct_key left outer join cost_element        ce      on ce.cost_element_key = cso.cost_element_key left outer join vendor_invoice      vi      on vi.fin_document_key = fd.fin_document_key left outer join fin_document        fdvi    on fdvi.fin_document_key = vi.fin_document_key join            expense_type        et      on et.expense_type_key = fddpe.expense_type_key left outer join post_history        ph      on ph.post_history_key = fdde.post_history_key  left outer join ( select j.fin_document_detail_key   fin_document_detail_key, max(case when j.category = 5 then j.journal_trans_date end)      post_date_unbilled, max(case when j.category = 1 then j.journal_trans_date end)      post_date_billed, max(case when j.category = 2 then j.journal_trans_date end)      post_date_deferred_rev, max(case when j.category = 3 then j.journal_trans_date end)      post_date_recognized_rev, sum(case when j.category = 5 then j.amount end) unbilled, sum(case when j.category = 1 then j.amount end) billed, sum(case when j.category = 2 then j.amount end) as deferred, sum(case when j.category = 3 then j.amount end) revenue, sum(case when j.category = 9 then j.amount end) write_off from journal_document_expense j group by j.fin_document_detail_key ) jv on jv.fin_document_detail_key = fdd.fin_document_detail_key union all select max(fdd.fin_document_detail_key)    transaction_data_key, null			                    timesheet_key, null                                expense_report_key, max(fd.fin_document_key)	        fin_document_key, max(fddpe.project_key)              project_key, max(fdd.person_key)                 person_key, max(fddpe.task_key)                 task_key, null                                labor_category_key, max(cppd.invoice_key)               cust_invoice_key, max(fdvi.fin_document_key)          vendor_invoicing_key, max(fdvi.document_number)           document_number, max(fddpe.project_type_key) trans_project_type_key, max(fdd.transaction_date)   trans_date, null                        ts_adjustment_number, null                        ts_adjustment_status, 'Financial Expenses'        transaction_type, max(case fd.document_type when 0  then 'VI' when 1  then 'VP' when 3  then 'CP' when 4  then 'D' when 5  then 'JE' when 6  then 'BR' when 7  then 'CI' when 8  then 'LC' when 9  then 'EC' when 10 then 'FY' when 11 then 'AL' when 12 then 'CMT' else         null end)                        source_doc_type, max(fd.status)              source_doc_status, max(fd.document_number)     source_doc_number, null                        er_completion_date, null                        ts_or_er_posted_date, max(fdd.description)        comments_description, max(et.expense_type_name)	expense_type, max(fd.post_date)			   post_date_cost, max(case when j.category = 5 then j.journal_trans_date end)      post_date_unbilled, max(case when j.category = 1 then j.journal_trans_date end)      post_date_billed, max(case when j.category = 2 then j.journal_trans_date end)      post_date_deferred_rev, max(case when j.category = 3 then j.journal_trans_date end)      post_date_recognized_rev, null                        quantity_cost, null                        quantity_net_billable, null                        quantity_writeoff, null                        item_code, null                        item_name, null                        item_uom, max(fdde.bill_amount)       bill_amount, max(fdde.amount)            cost_amount, null                        billable_amount, null                                                postings_cost, sum(case when j.category = 5 then j.amount end)     postings_unbilled, sum(case when j.category = 1 then j.amount end)     postings_billed, sum(case when j.category = 2 then j.amount end)     postings_deferred, sum(case when j.category = 3 then j.amount end)     postings_revenue, sum(case when j.category = 9 then j.amount end)     postings_writeoff, null                                bill_rate, null                                cost_rate, coalesce(ce.code, fm.fee_method)    cost_element, max(coalesce(ce.description, fm.fee_method)) cost_element_desc, max(case when ce.cost_element_type is null then 'Fee' else ce.cost_element_type end)                            cost_element_type, max(cs.cost_structure)              cost_structure, max(case when fdde.post_history_key is null then 'N' else 'Y' end)                                posted_indicator, max(fdd.account_key)				account_key, null                                ic_cost_amount, null                                ic_cost_currency, max(fd.currency)                    cost_currency, max(fdde.bill_currency)             bill_currency from journal_cost_plus_detail j join            cost_plus_post_detail           cppd    on cppd.cost_plus_post_detail_key = j.cost_plus_post_detail_key join            fin_document_detail_expense     fdde    on fdde.fin_document_detail_key = cppd.fin_document_det_expense_key join            fin_document_detail             fdd     on fdd.fin_document_detail_key = fdde.fin_document_detail_key join            fin_document_det_proj_expense   fddpe   on fddpe.fin_document_detail_key = fdd.fin_document_detail_key join            fin_document                    fd      on fd.fin_document_key = fdd.fin_document_key left outer join vendor_invoice              vi      on vi.fin_document_key = fd.fin_document_key left outer join fin_document                fdvi    on fdvi.fin_document_key = vi.fin_document_key left outer join post_history        ph      on ph.post_history_key = fdde.post_history_key left outer join fee_method          fm      on fm.fee_method_key = cppd.fee_method_key join            expense_type        et      on et.expense_type_key = fddpe.expense_type_key left outer join cost_struct_odc     cso     on cso.cost_struct_odc_key = fdde.cost_struct_odc_key left outer join cost_struct         cs      on cs.cost_struct_key = cso.cost_struct_key left outer join cost_element        ce      on ce.cost_element_key = cppd.cost_element_key  group by cppd.fin_document_det_expense_key, coalesce(ce.code, fm.fee_method) union all select fdd.fin_document_detail_key transaction_data_key, null			            timesheet_key, null                        expense_report_key, fd.fin_document_key	        fin_document_key,  fddpi.project_key           project_key, fdd.person_key              person_key, fddpi.task_key              task_key, null                        labor_category_key, fddi.invoice_key     		cust_invoice_key, fdvi.fin_document_key       vendor_invoicing_key, fdvi.document_number 		document_number, fddpi.project_type_key      trans_project_type_key, fdd.transaction_date        trans_date, null                        ts_adjustment_number, null                        ts_adjustment_status, 'Financial Items'           transaction_type, case fd.document_type when 0  then 'VI' when 1  then 'VP' when 3  then 'CP' when 4  then 'D' when 5  then 'JE' when 6  then 'BR' when 7  then 'CI' when 8  then 'LC' when 9  then 'EC' when 10 then 'FY' when 11 then 'AL' when 12 then 'CMT' else         null end                         source_doc_type, fd.status                   source_doc_status, fd.document_number          source_doc_number, null                        er_completion_date, null                        ts_or_er_posted_date, fdd.description             comments_description, et.expense_type_name        expense_type, fd.post_date					post_date_cost, jv.post_date_unbilled           post_date_unbilled, jv.post_date_billed           	post_date_billed, jv.post_date_deferred_rev       post_date_deferred_rev, jv.post_date_recognized_rev     post_date_recognized_rev, fdi.quantity              quantity_cost, coalesce(fdi.quantity - wv.write_off_quantity,fdi.quantity) quantity_net_billable, wv.write_off_quantity       quantity_writeoff, i.code                      item_code, i.name                      item_name, uom.name                    item_uom, fddi.bill_amount            bill_amount, fddi.amount                 cost_amount, fddi.bill_amount            billable_amount, fddi.amount                 postings_cost, jv.unbilled                 postings_unbilled, jv.billed                   postings_billed, jv.deferred                 postings_deferred, jv.revenue                  postings_revenue, jv.write_off                postings_writeoff, null                        bill_rate, null                        cost_rate, ce.code                     cost_element, ce.description              cost_element_desc, ce.cost_element_type        cost_element_type, cs.cost_structure           cost_structure, case when fddi.post_history_key is null then 'N' else 'Y' end                         posted_indicator, fdd.account_key				account_key, null                        ic_cost_amount, null                        ic_cost_currency, fd.currency                 cost_currency, fddi.bill_currency          bill_currency from fin_document_detail fdd join            fin_document                    fd      on fd.fin_document_key = fdd.fin_document_key join            fin_document_det_proj_item   	fddpi   on fddpi.fin_document_detail_key = fdd.fin_document_detail_key join 			fin_doc_det_item 				fdi 	on fdi.fin_document_detail_key = fddpi.fin_document_detail_key left outer join fin_document_detail_item		fddi    on fddi.fin_document_detail_key = fdd.fin_document_detail_key join            item                        i       on i.item_key = fdi.item_key join            unit_of_measure             uom     on uom.uom_key = fdi.uom_key left outer join cost_struct_odc     cso     on cso.cost_struct_odc_key = fddi.cost_struct_odc_key left outer join cost_struct         cs      on cs.cost_struct_key = cso.cost_struct_key left outer join cost_element        ce      on ce.cost_element_key = cso.cost_element_key join            expense_type        et      on et.expense_type_key = fddi.expense_type_key and et.expense_type not in ('ADVANCE', 'CASH-RETURN') left outer join vendor_invoice      vi      on vi.fin_document_key = fd.fin_document_key left outer join fin_document        fdvi    on fdvi.fin_document_key = vi.fin_document_key left outer join post_history        ph      on ph.post_history_key = fddi.post_history_key left outer join ( select j.fin_document_detail_key   fin_document_detail_key, max(case when j.category = 5 then j.journal_trans_date end)      post_date_unbilled, max(case when j.category = 1 then j.journal_trans_date end)      post_date_billed, max(case when j.category = 2 then j.journal_trans_date end)      post_date_deferred_rev, max(case when j.category = 3 then j.journal_trans_date end)      post_date_recognized_rev, sum(case when j.category = 5 then j.amount end) unbilled, sum(case when j.category = 1 then j.amount end) billed, sum(case when j.category = 2 then j.amount end) as deferred, sum(case when j.category = 3 then j.amount end) revenue, sum(case when j.category = 9 then j.amount end) write_off from journal_document_item j group by j.fin_document_detail_key ) jv on jv.fin_document_detail_key = fdd.fin_document_detail_key left outer join fi_write_off wv on wv.fin_document_detail_key = fdd.fin_document_detail_key union all select max(fdd.fin_document_detail_key)    transaction_data_key, null			                    timesheet_key, null                                expense_report_key, max(fd.fin_document_key)	        fin_document_key, max(fddpi.project_key)              project_key, max(fdd.person_key)                 person_key, max(fddpi.task_key)                 task_key, null                                labor_category_key, max(cppd.invoice_key)               cust_invoice_key, max(fdvi.fin_document_key)          vendor_invoicing_key, max(fdvi.document_number)           document_number, max(fddpi.project_type_key) trans_project_type_key, max(fdd.transaction_date)   trans_date, null                        ts_adjustment_number, null                        ts_adjustment_status, 'Financial Items'           transaction_type, max(case fd.document_type when 0  then 'VI' when 1  then 'VP' when 3  then 'CP' when 4  then 'D' when 5  then 'JE' when 6  then 'BR' when 7  then 'CI' when 8  then 'LC' when 9  then 'EC' when 10 then 'FY' when 11 then 'AL' when 12 then 'CMT' else         null end)                        source_doc_type, max(fd.status)              source_doc_status, max(fd.document_number)     source_doc_number, null                        er_completion_date, null                        ts_or_er_posted_date, max(fdd.description)        comments_description, max(et.expense_type_name)   expense_type, max(fd.post_date)			   post_date_cost, max(case when j.category = 5 then j.journal_trans_date end)      post_date_unbilled, max(case when j.category = 1 then j.journal_trans_date end)      post_date_billed, max(case when j.category = 2 then j.journal_trans_date end)      post_date_deferred_rev, max(case when j.category = 3 then j.journal_trans_date end)      post_date_recognized_rev, max(fdi.quantity)              quantity_cost, max(coalesce(fdi.quantity - wv.write_off_quantity,fdi.quantity))                        quantity_net_billable, null                        quantity_writeoff, max(i.code)                 item_code, max(i.name)                 item_name, max(uom.name)               item_uom, max(fddi.bill_amount)       bill_amount, max(fddi.amount )           cost_amount, null                        billable_amount, null                                                postings_cost, sum(case when j.category = 5 then j.amount end)     postings_unbilled, sum(case when j.category = 1 then j.amount end)     postings_billed, sum(case when j.category = 2 then j.amount end)     postings_deferred, sum(case when j.category = 3 then j.amount end)     postings_revenue, sum(case when j.category = 9 then j.amount end)     postings_writeoff, null                                bill_rate, null                                cost_rate, coalesce(ce.code, fm.fee_method)    cost_element, max(coalesce(ce.description, fm.fee_method)) cost_element_desc, max(case when ce.cost_element_type is null then 'Fee' else ce.cost_element_type end)                            cost_element_type, max(cs.cost_structure)              cost_structure, max(case when fddi.post_history_key is null then 'N' else 'Y' end)                                posted_indicator, max(fdd.account_key)				account_key, null                                ic_cost_amount, null                                ic_cost_currency, max(fd.currency)                    cost_currency, max(fddi.bill_currency)             bill_currency from journal_cost_plus_detail j join            cost_plus_post_detail       cppd    on cppd.cost_plus_post_detail_key = j.cost_plus_post_detail_key join            fin_document_detail_item    fddi    on fddi.fin_document_detail_key = cppd.fin_document_det_item_key join            fin_document_detail         fdd     on fdd.fin_document_detail_key = fddi.fin_document_detail_key join            fin_document_det_proj_item  fddpi   on fddpi.fin_document_detail_key = fdd.fin_document_detail_key join 			fin_doc_det_item 			fdi 	on fdi.fin_document_detail_key = fddpi.fin_document_detail_key join            fin_document                fd      on fd.fin_document_key = fdd.fin_document_key left outer join vendor_invoice              vi      on vi.fin_document_key = fd.fin_document_key left outer join fin_document                fdvi    on fdvi.fin_document_key = vi.fin_document_key join            expense_type                et      on et.expense_type_key = fddi.expense_type_key and et.expense_type not in ('ADVANCE', 'CASH-RETURN') join            item                i       on i.item_key = fdi.item_key join            unit_of_measure     uom     on uom.uom_key = fdi.uom_key left outer join post_history        ph      on ph.post_history_key = fddi.post_history_key left outer join fee_method          fm      on fm.fee_method_key = cppd.fee_method_key left outer join cost_struct_odc     cso     on cso.cost_struct_odc_key = fddi.cost_struct_odc_key left outer join cost_struct         cs      on cs.cost_struct_key = cso.cost_struct_key left outer join cost_element        ce      on ce.cost_element_key = cppd.cost_element_key left outer join fi_write_off wv on wv.fin_document_detail_key = fdd.fin_document_detail_key  group by cppd.fin_document_det_item_key, coalesce(ce.code, fm.fee_method) union all select fp.fixed_price_key          transaction_data_key, null			            timesheet_key, null                        expense_report_key, null	                    fin_document_key, fp.project_key              project_key, null                        person_key, fp.task_key                 task_key, null                        labor_category_key, fp.invoice_key              cust_invoice_key, null                        vendor_invoicing_key, null						document_number, coalesce(t.project_type_key, p.project_type_key) trans_project_type_key, case when fp.use_wbs_end_date = 'Y' then coalesce(t.completed, t.rev_end_date, p.completed_date, p.rev_end_date) else fp.bill_date end                         trans_date, null                        ts_adjustment_number, null                        ts_adjustment_status, 'Fixed Price Items'         transaction_type, null                        source_doc_type, null                        source_doc_status, null                        source_doc_number, null                        er_completion_date, null                        ts_or_er_posted_date, fp.description              comments_description, null                        expense_type, null                        post_date_cost, jv.post_date_unbilled         post_date_unbilled, jv.post_date_billed           post_date_billed, jv.post_date_deferred_rev     post_date_deferred_rev, jv.post_date_recognized_rev   post_date_recognized_rev, null                        quantity_cost, null                        quantity_net_billable, null                        quantity_writeoff, null                        item_code, null                        item_name, null                        item_uom, fp.amount                   bill_amount, null                        cost_amount, fp.amount                   billable_amount, null                        postings_cost, jv.unbilled                 postings_unbilled, jv.billed                   postings_billed, jv.deferred                 postings_deferred, jv.revenue                  postings_revenue, jv.write_off                postings_writeoff, null                        bill_rate, null                        cost_rate, null                        cost_element, null                        cost_element_desc, null                        cost_element_type, null                        cost_structure, case when coalesce(fp.post_history_key, fp.billable_post_history_key) is null then 'N' else 'Y' end                         posted_indicator, jv.account_key				account_key, null                        ic_cost_amount, null                        ic_cost_currency, p.project_currency          cost_currency, p.project_billing_currency  bill_currency from fixed_price fp join            project p on p.project_key = fp.project_key left outer join task    t on t.task_key = fp.task_key left outer join ( select j.fixed_price_key       fixed_price_key, max(case when j.category = 5 then j.journal_trans_date end)      post_date_unbilled, max(case when j.category = 1 then j.journal_trans_date end)      post_date_billed, max(case when j.category = 2 then j.journal_trans_date end)      post_date_deferred_rev, max(case when j.category = 3 then j.journal_trans_date end)      post_date_recognized_rev, sum(case when j.category = 5 then j.amount end) unbilled, sum(case when j.category = 1 then j.amount end) billed, sum(case when j.category = 2 then j.amount end) as deferred, sum(case when j.category = 3 then j.amount end) revenue, sum(case when j.category = 9 then j.amount end) write_off, max(j.account_key)								account_key from journal_fixed_price j group by j.fixed_price_key ) jv on jv.fixed_price_key = fp.fixed_price_key union all select pl.prebilled_labor_key      transaction_data_key, null			            timesheet_key, null                        expense_report_key, null	                    fin_document_key, pl.project_key              project_key, null                        person_key, null                        task_key, null                        labor_category_key, pl.invoice_key              cust_invoice_key, null                        vendor_invoicing_key, null						document_number, p.project_type_key          trans_project_type_key, pl.bill_date                trans_date, null                        ts_adjustment_number, null                        ts_adjustment_status, 'Pre-billed Labor Items'    transaction_type, null                        source_doc_type, null                        source_doc_status, null                        source_doc_number, null                        er_completion_date, null                        ts_or_er_posted_date, pl.description              comments_description, null                        expense_type, null                        post_date_cost, jv.post_date_unbilled         post_date_unbilled, jv.post_date_billed           post_date_billed, jv.post_date_deferred_rev     post_date_deferred_rev, jv.post_date_recognized_rev   post_date_recognized_rev, null                        quantity_cost, null                        quantity_net_billable, null                        quantity_writeoff, null                        item_code, null                        item_name, null                        item_uom, pl.amount                   bill_amount, null                        cost_amount, pl.amount                   billable_amount, null                        postings_cost, jv.unbilled                 postings_unbilled, jv.billed                   postings_billed, jv.deferred                 postings_deferred, jv.revenue                  postings_revenue, null                        postings_writeoff, null                        bill_rate, null                        cost_rate, null                        cost_element, null                        cost_element_desc, null                        cost_element_type, null                        cost_structure, case when pl.post_history_key is null then 'N' else 'Y' end                         posted_indicator, jv.account_key				account_key, null                        ic_cost_amount, null                        ic_cost_currency, p.project_currency          cost_currency, p.project_billing_currency  bill_currency from prebilled_labor pl  join            project p   on p.project_key = pl.project_key left outer join ( select j.prebilled_labor_key prebilled_labor_key, max(case when j.category = 5 then j.journal_trans_date end)      post_date_unbilled, max(case when j.category = 1 then j.journal_trans_date end)      post_date_billed, max(case when j.category = 2 then j.journal_trans_date end)      post_date_deferred_rev, max(case when j.category = 3 then j.journal_trans_date end)      post_date_recognized_rev, sum(case when j.category = 5 then j.amount end) unbilled, sum(case when j.category = 1 then j.amount end) billed, sum(case when j.category = 2 then j.amount end) as deferred, sum(case when j.category = 3 then j.amount end) revenue, max(j.account_key) 								account_key from journal_prebilled_labor j group by j.prebilled_labor_key ) jv on jv.prebilled_labor_key = pl.prebilled_labor_key union all select fca.funding_cap_adjustment_key  transaction_data_key, null			                timesheet_key, null                            expense_report_key, null	                        fin_document_key, fca.project_key             project_key, null                        person_key, fca.task_key                task_key, null                        labor_category_key, fca.invoice_key             cust_invoice_key, null                        vendor_invoicing_key, null						document_number, coalesce(t.project_type_key, p.project_type_key) trans_project_type_key, ph.journal_trans_date       trans_date, null                        ts_adjustment_number, null                        ts_adjustment_status, 'Funding Cap Adjustments'   transaction_type, null                        source_doc_type, null                        source_doc_status, null                        source_doc_number, null                        er_completion_date, null                        ts_or_er_posted_date, null                        comments_description, null                        expense_type, null                        post_date_cost, jv.post_date_unbilled         post_date_unbilled, jv.post_date_billed           post_date_billed, jv.post_date_deferred_rev     post_date_deferred_rev, jv.post_date_recognized_rev   post_date_recognized_rev, null                        quantity_cost, null                        quantity_net_billable, null                        quantity_writeoff, null                        item_code, null                        item_name, null                        item_uom, fca.bill_amount             bill_amount, null                        cost_amount, fca.bill_amount             billable_amount, null                        postings_cost, jv.unbilled                 postings_unbilled, jv.billed                   postings_billed, jv.deferred                 postings_deferred, jv.revenue                  postings_revenue, jv.write_off                postings_writeoff, null                        bill_rate, null                        cost_rate, 'Funding Cap Adjustment'    cost_element, 'Funding Cap Adjustment'    cost_element_desc, 'Funding Cap Adjustment'    cost_element_type, cs.cost_structure           cost_structure, case when fca.post_history_key is null then 'N' else 'Y' end                         posted_indicator, jv.account_key				account_key, null                        ic_cost_amount, null                        ic_cost_currency, p.project_currency          cost_currency, p.project_billing_currency  bill_currency from funding_cap_adjustment fca  join            post_history    ph  on ph.post_history_key = fca.post_history_key join            project         p   on p.project_key = fca.project_key left outer join task            t   on t.task_key = fca.task_key left outer join cost_struct     cs  on cs.cost_struct_key = p.cost_struct_key left outer join ( select j.funding_cap_adjustment_key funding_cap_adjustment_key, max(case when j.category = 5 then j.journal_trans_date end)      post_date_unbilled, max(case when j.category = 1 then j.journal_trans_date end)      post_date_billed, max(case when j.category = 2 then j.journal_trans_date end)      post_date_deferred_rev, max(case when j.category = 10 then j.journal_trans_date end)      post_date_recognized_rev, sum(case when j.category = 5 then j.amount end) unbilled, sum(case when j.category = 1 then j.amount end) billed, sum(case when j.category = 2 then j.amount end) as deferred, sum(case when j.category = 10 then j.amount end) revenue, sum(case when j.category = 9 then j.amount end) write_off, max(j.account_key) 								account_key from journal_funding_cap_adjustment j group by j.funding_cap_adjustment_key ) jv on jv.funding_cap_adjustment_key = fca.funding_cap_adjustment_key union all select fca.fee_cap_adjustment_key  transaction_data_key, null			            timesheet_key, null                        expense_report_key, null	                    fin_document_key, fca.project_key             project_key, null                        person_key, null                        task_key, null                        labor_category_key, fca.invoice_key             cust_invoice_key, null                        vendor_invoicing_key, null						document_number, p.project_type_key          trans_project_type_key, ph.journal_trans_date       trans_date, null                        ts_adjustment_number, null                        ts_adjustment_status, 'Fee Cap Adjustments'       transaction_type, null                        source_doc_type, null                        source_doc_status, null                        source_doc_number, null                        er_completion_date, null                        ts_or_er_posted_date, fm.fee_method               comments_description, null                        expense_type, null                        post_date_cost, jv.post_date_unbilled         post_date_unbilled, jv.post_date_billed           post_date_billed, jv.post_date_deferred_rev     post_date_deferred_rev, jv.post_date_recognized_rev   post_date_recognized_rev, null                        quantity_cost, null                        quantity_net_billable, null                        quantity_writeoff, null                        item_code, null                        item_name, null                        item_uom, fca.bill_amount             bill_amount, null                        cost_amount, fca.bill_amount             billable_amount, null                        postings_cost, jv.unbilled                 postings_unbilled, jv.billed                   postings_billed, jv.deferred                 postings_deferred, jv.revenue                  postings_revenue, jv.write_off                postings_writeoff, null                        bill_rate, null                        cost_rate, fm.fee_method               cost_element, fm.fee_method               cost_element_desc, fm.fee_method               cost_element_type, null                        cost_structure, case when fca.post_history_key is null then 'N' else 'Y' end                         posted_indicator, jv.account_key				account_key, null                        ic_cost_amount, null                        ic_cost_currency, p.project_currency          cost_currency, p.project_billing_currency  bill_currency from fee_cap_adjustment fca  join post_history   ph  on ph.post_history_key = fca.post_history_key join project        p   on p.project_key = fca.project_key join fee_method     fm  on fm.fee_method_key = fca.fee_method_key  left outer join ( select j.fee_cap_adjustment_key fee_cap_adjustment_key, max(case when j.category = 5 then j.journal_trans_date end)      post_date_unbilled, max(case when j.category = 1 then j.journal_trans_date end)      post_date_billed, max(case when j.category = 2 then j.journal_trans_date end)      post_date_deferred_rev, max(case when j.category = 25 then j.journal_trans_date end)      post_date_recognized_rev, sum(case when j.category = 5 then j.amount end) unbilled, sum(case when j.category = 1 then j.amount end) billed, sum(case when j.category = 2 then j.amount end) as deferred, sum(case when j.category = 25 then j.amount end) revenue, sum(case when j.category = 9 then j.amount end) write_off, max(j.account_key) 								account_key from journal_fee_cap_adjustment j group by j.fee_cap_adjustment_key ) jv on jv.fee_cap_adjustment_key = fca.fee_cap_adjustment_key union all select otc.onetime_charge_key      transaction_data_key, null			            timesheet_key, null                        expense_report_key, null	                    fin_document_key, otc.project_key             project_key, null                        person_key, otc.task_key                task_key, null                        labor_category_key, otc.invoice_key             cust_invoice_key, null                        vendor_invoicing_key, null						document_number, coalesce(t.project_type_key, p.project_type_key) trans_project_type_key, i.invoice_date              trans_date, null                        ts_adjustment_number, null                        ts_adjustment_status, 'Additional Items'          transaction_type, null                        source_doc_type, null                        source_doc_status, null                        source_doc_number, null                        er_completion_date, null                        ts_or_er_posted_date, otc.description             comments_description, null                        expense_type, null                        post_date_cost, jv.post_date_unbilled       post_date_unbilled, jv.post_date_billed       	post_date_billed, jv.post_date_deferred_rev   post_date_deferred_rev, jv.post_date_recognized_rev post_date_recognized_rev, null                        quantity_cost, null                        quantity_net_billable, null                        quantity_writeoff, null                        item_code, null                        item_name, null                        item_uom, otc.amount                  bill_amount, null                        cost_amount, otc.amount                  billable_amount, null                        postings_cost, jv.unbilled                 postings_unbilled, jv.billed                   postings_billed, jv.deferred                 postings_deferred, jv.revenue                  postings_revenue, null                        postings_writeoff, null                        bill_rate, null                        cost_rate, null                        cost_element, null                        cost_element_desc, null                        cost_element_type, null                        cost_structure, case when jv.journal_trans_date is not null then 'Y' else 'N' end                         posted_indicator, jv.account_key				account_key, null                        ic_cost_amount, null                        ic_cost_currency, p.project_currency          cost_currency, p.project_billing_currency  bill_currency  from onetime_charge otc  join            invoice i on i.invoice_key = otc.invoice_key join            project p on p.project_key = otc.project_key left outer join task    t on t.task_key = otc.task_key left outer join ( select j.onetime_charge_key        onetime_charge_key, max(j.journal_trans_date)   journal_trans_date, max(case when j.category = 5 then j.journal_trans_date end)      post_date_unbilled, max(case when j.category = 1 then j.journal_trans_date end)      post_date_billed, max(case when j.category = 2 then j.journal_trans_date end)      post_date_deferred_rev, max(case when j.category = 3 then j.journal_trans_date end)      post_date_recognized_rev, sum(case when j.category = 5 then j.amount end) unbilled, sum(case when j.category = 1 then j.amount end) billed, sum(case when j.category = 2 then j.amount end) as deferred, sum(case when j.category = 3 then j.amount end) revenue, max(j.account_key)								account_key from journal_onetime_charge j group by j.onetime_charge_key ) jv on jv.onetime_charge_key = otc.onetime_charge_key ) x left outer join person                      per     on per.person_key = x.person_key left outer join project                     p       on p.project_key = x.project_key join            project_type                pttr    on pttr.project_type_key = x.trans_project_type_key left outer join task                        t       on t.task_key = x.task_key join            customer                    porg    on porg.customer_key = p.customer_key left outer join customer                    own     on own.customer_key = p.owning_customer_key left outer join customer                    cle     on cle.customer_key = own.legal_entity_key left outer join labor_category              lc      on lc.labor_category_key = x.labor_category_key left outer join billing_type                btp     on btp.billing_type_key = p.billing_type_key left outer join billing_type                btt     on btt.billing_type_key = t.billing_type_key left outer join invoice                     inv     on inv.invoice_key = x.cust_invoice_key left outer join currency_code               bcc     on bcc.currency_code_key = x.bill_currency left outer join currency_code               ccc     on ccc.currency_code_key = x.cost_currency left outer join currency_code               ic_ccc  on ic_ccc.currency_code_key = x.ic_cost_currency  left outer join ( select pc.project_key, pc.person_key, pc.primary_ind from project_controller pc group by pc.project_key, pc.person_key, pc.primary_ind ) proj_indicator on proj_indicator.project_key = x.project_key AND proj_indicator.person_key = x.person_key AND proj_indicator.primary_ind = 'Y' left outer join ( select pc.project_key, pc.person_key, pc.primary_ind from project_controller pc group by pc.project_key, pc.person_key, pc.primary_ind ) alternate_indicator on alternate_indicator.project_key = x.project_key AND alternate_indicator.person_key = x.person_key AND alternate_indicator.primary_ind = 'N' where (x.trans_date >= to_date(concat('01/', to_char(current_date,'MM/YYYY')),'DD/MM/YYYY') - INTERVAL '60' month) and ( (exists (select 'x' from member where person_key = '3896' and role_key IN (1,21)))  or exists ( select 'x' from project_controller pc where pc.project_key = x.project_key and pc.person_key = '3896' and pc.role_key in (3, 14, 15, 18, 17) )  or exists ( select 'x' from project_controller pc join alternate a on a.person_key = pc.person_key and a.role_key = pc.role_key where pc.project_key = x.project_key and pc.primary_ind = 'Y' and a.alternate_key = '3896' and pc.role_key in (3, 14, 15, 18, 17) )  or ( exists ( select pra.project_key from project_open_access_view pra where pra.project_viewer_open = 'Y' and pra.project_key = x.project_key ) and ( exists ( select 'x' from org_access_person oap where oap.global_access = 'Y' and oap.person_key = '3896' and oap.access_type = 1 and oap.role_key = 14 ) or porg.customer_key in ( select h.customer_key from org_access_hierarchy h join org_access_person oap on oap.org_access_person_key = h.org_access_person_key where oap.person_key = '3896' and oap.access_type = 1 and oap.role_key = 14 ) ) and ( exists ( select 'x' from org_access_person oap where oap.global_access = 'Y' and oap.person_key = '3896' and oap.access_type = 4 and oap.role_key = 14 ) or own.customer_key in ( select h.customer_key from org_access_hierarchy h join org_access_person oap on oap.org_access_person_key = h.org_access_person_key where oap.person_key = '3896' and oap.access_type = 4 and oap.role_key = 14 ) ) )  or ( exists ( select pra.project_key from project_open_access_view pra where pra.project_manager_open = 'Y' and pra.project_key = x.project_key ) and ( exists ( select 'x' from org_access_person oap where oap.global_access = 'Y' and oap.person_key = '3896' and oap.access_type = 1 and oap.role_key = 3 ) or porg.customer_key in ( select h.customer_key from org_access_hierarchy h join org_access_person oap on oap.org_access_person_key = h.org_access_person_key where oap.person_key = '3896' and oap.access_type = 1 and oap.role_key = 3 ) ) and ( exists ( select 'x' from org_access_person oap where oap.global_access = 'Y' and oap.person_key = '3896' and oap.access_type = 4 and oap.role_key = 3 ) or own.customer_key in ( select h.customer_key from org_access_hierarchy h join org_access_person oap on oap.org_access_person_key = h.org_access_person_key where oap.person_key = '3896' and oap.access_type = 4 and oap.role_key = 3 ) ) )  or ( exists ( select pra.project_key from project_open_access_view pra where pra.resource_planner_open = 'Y' and pra.project_key = x.project_key ) and ( exists ( select 'x' from org_access_person oap where oap.global_access = 'Y' and oap.person_key = '3896' and oap.access_type = 1 and oap.role_key = 15 ) or porg.customer_key in ( select h.customer_key from org_access_hierarchy h join org_access_person oap on oap.org_access_person_key = h.org_access_person_key where oap.person_key = '3896' and oap.access_type = 1 and oap.role_key = 15 ) ) and ( exists ( select 'x' from org_access_person oap where oap.global_access = 'Y' and oap.person_key = '3896' and oap.access_type = 4 and oap.role_key = 15 ) or own.customer_key in ( select h.customer_key from org_access_hierarchy h join org_access_person oap on oap.org_access_person_key = h.org_access_person_key where oap.person_key = '3896' and oap.access_type = 4 and oap.role_key = 15 ) ) )  or ( exists ( select pra.project_key from project_open_access_view pra where pra.resource_assigner_open = 'Y' and pra.project_key = x.project_key ) and ( exists ( select 'x' from org_access_person oap where oap.global_access = 'Y' and oap.person_key = '3896' and oap.access_type = 1 and oap.role_key = 18 ) or porg.customer_key in ( select h.customer_key from org_access_hierarchy h join org_access_person oap on oap.org_access_person_key = h.org_access_person_key where oap.person_key = '3896' and oap.access_type = 1 and oap.role_key = 18 ) ) and ( exists ( select 'x' from org_access_person oap where oap.global_access = 'Y' and oap.person_key = '3896' and oap.access_type = 4 and oap.role_key = 18 ) or own.customer_key in ( select h.customer_key from org_access_hierarchy h join org_access_person oap on oap.org_access_person_key = h.org_access_person_key where oap.person_key = '3896' and oap.access_type = 4 and oap.role_key = 18 ) ) )  or ( exists ( select pra.project_key from project_open_access_view pra where pra.resource_requestor_open = 'Y' and pra.project_key = x.project_key ) and ( exists ( select 'x' from org_access_person oap where oap.global_access = 'Y' and oap.person_key = '3896' and oap.access_type = 1 and oap.role_key = 17 ) or porg.customer_key in ( select h.customer_key from org_access_hierarchy h join org_access_person oap on oap.org_access_person_key = h.org_access_person_key where oap.person_key = '3896' and oap.access_type = 1 and oap.role_key = 17 ) ) and ( exists ( select 'x' from org_access_person oap where oap.global_access = 'Y' and oap.person_key = '3896' and oap.access_type = 4 and oap.role_key = 17 ) or own.customer_key in ( select h.customer_key from org_access_hierarchy h join org_access_person oap on oap.org_access_person_key = h.org_access_person_key where oap.person_key = '3896' and oap.access_type = 4 and oap.role_key = 17 ) ) )  or exists ( select 'x' from project_controller pc where pc.project_key = x.project_key and pc.person_key = '3896' and pc.role_key in (12, 13) )  or exists ( select 'x' from project_controller pc join alternate a on a.person_key = pc.person_key and a.role_key = pc.role_key where pc.project_key = x.project_key and pc.primary_ind = 'Y' and a.alternate_key = '3896' and pc.role_key in (12, 13) ) ) 
) wrE19
INNER JOIN (with intercompany_support as( select pi.project_key, STRING_AGG(org.customer_name, ', ') as pi_list from project_intercompany pi left join customer org on org.customer_key= pi.ic_org group by pi.project_key ) select proj.project_key 						as "Project Key", proj.customer_key                   	as "Customer Key", proj.owning_customer_key            	as "Owning Cust Key", pra.billing_manager_open            	as "Billing Mgr Open", pra.billing_viewer_open             	as "Billing Viewer Open", pra.project_po_viewer_open          	as "Proj PO Viewer Open", pra.project_pr_viewer_open          	as "Proj PR Viewer Open", pra.project_document_viewer_open    	as "Proj Doc Viewer Open", pra.project_manager_open            	as "Proj Mgr Open", pra.project_viewer_open             	as "Proj Viewer Open", pra.resource_assigner_open          	as "Res Assigner Open", pra.resource_planner_open           	as "Res Planner Open", pra.resource_requestor_open         	as "Res Requestor Open", proj.expense_assignment_flag        	as "Expense Assign Flag", proj.future_charge                  	as "Future Charge", proj.item_assignment_flag           	as "Item Assign Flag", proj.time_assignment_flag           	as "Time Assign Flag", case proj.bill_rate_source when 'P' then 'P - Person Bill Rate' when 'L' then 'L - Labor Category Bill Rate' end                                     as "Proj Bill Rate Source", bt.code                                 as "Proj Billing Type Code", case when exists(select person_key from member where person_key = '3896' and role_key in (1,21,37,39)) then    proj.Exp_Bill_Budget else        null end                                     as "Proj Budget Exp Bill Amt", case when exists(select person_key from member where person_key = '3896' and role_key in (1,21,38,40)) then    proj.exp_cost_burden_budget else        null end                                     as "Proj Budget Exp Burdened Cost", case when exists(select person_key from member where person_key = '3896' and role_key in (1,21,38,40)) then    proj.exp_cost_budget else        null end                                     as "Proj Budget Exp Cost Amt", proj.hours_budget                       as "Proj Budget Hours", case when exists(select person_key from member where person_key = '3896' and role_key in (1,21,37,39)) then    proj.labor_bill_budget else        null end                                     as "Proj Budget Lab Bill Amt", case when exists(select person_key from member where person_key = '3896' and role_key in (1,21,38,40)) then    proj.labor_cost_burden_budget else        null end                                     as "Proj Budget Lab Burd Cost", case when exists(select person_key from member where person_key = '3896' and role_key in (1,21,38,40)) then    proj.Labor_Cost_Budget else        null end                                     as "Proj Budget Lab Cost Amt", proj.project_code                       as "Project Code", proj.purpose                            as "Purpose", proj.completed_date                     as "Completed Date", proj.project_color                      as "Project Color", case proj.cost_rate_source when 'P' then 'P - Person Cost Rate' when 'L' then 'L - Labor Category Cost Rate' end                                     as "Proj Cost Rate Source", cs.cost_structure                       as "Cost Structure", loc.location_name                       as "Location", pc.pay_code                             as "Pay Code", proj.leave_balance                      as "Leave Balance", proj.Enforce_Wbs_Dates                  as "Enforce Wbs Dates", case when exists(select person_key from member where person_key = '3896' and role_key in (1,21,37,39)) then    proj.exp_bill_est_tot else        null end                                     as "Proj Est Tot Exp Bill Amt", case when exists(select person_key from member where person_key = '3896' and role_key in (1,21,38,40)) then    proj.exp_cost_est_tot else        null end                                     as "Proj Est Tot Exp Cost Amt", proj.hours_est_tot                      as "Proj Est Total", case when exists(select person_key from member where person_key = '3896' and role_key in (1,21,37,39)) then    proj.labor_bill_est_tot else        null end                                     as "Proj Est Tot Lab Bill Amt", case when exists(select person_key from member where person_key = '3896' and role_key in (1,21,38,40)) then    proj.labor_cost_est_tot else        null end                                     as "Proj Est Tot Lab Cost Amt", case when exists(select person_key from member where person_key = '3896' and role_key in (1,21,37,39)) then    proj.Exp_Bill_Etc else        null end                                     as "Proj ETC Exp Bill Amt", case when exists(select person_key from member where person_key = '3896' and role_key in (1,21,38,40)) then    proj.exp_cost_etc else        null end                                     as "Proj ETC Exp Cost Amt", proj.hours_etc                          as "Proj ETC Hours", case when exists(select person_key from member where person_key = '3896' and role_key in (1,21,37,39)) then    proj.labor_bill_etc else        null end                                     as "Proj ETC Lab Bill Amt", case when exists(select person_key from member where person_key = '3896' and role_key in (1,21,38,40)) then    proj.labor_cost_etc else        null end                                     as "Proj ETC Labor Cost Amount", proj.er_task_required                   as "ER Task Reqd", proj.Account_Number                     as "Account Number", coalesce(proj.funded_value, proj.orig_funded_value)        as "Funded Value", proj.item_task_required                 as "Item Task Reqd", cle.customer_code                       as "Proj Legal Entity Code", cle.customer_name                       as "Proj Legal Entity Name", proj.limit_bill_to_funded               as "Proj Limit Bill to Funded", proj.limit_rev_to_funded                as "Proj Limit Rev to Funded", proj.location_required                  as "Location Reqd", proj.task_level_assignment              as "Task Level Assignment", perm.last_name 							as "Proj Manager Last Name", perm.first_name 					    as "Proj Manager First Name", perm.middle_initial                     as "Proj Manager Middle Initial", perm.username                           as "Proj Manager Username", perm.email                              as "Proj Manager Email", perl.last_name 							as "Proj Lead Last Name", perl.first_name 					    as "Proj Lead First Name", perl.middle_initial                     as "Proj Lead Middle Initial", perl.username                           as "Proj Lead Username", perl.email                              as "Proj Lead Email", perv.last_name 							as "Proj Viewer Last Name", perv.first_name 					    as "Proj Viewer First Name", perv.middle_initial                     as "Proj Viewer Middle Initial", perv.username                           as "Proj Viewer Username", perv.email                              as "Proj Viewer Email", c.customer_code                         as "Proj Org Code", c.customer_name                         as "Proj Org Name", proj.orig_end_date                      as "Original End Date", proj.orig_start_date                    as "Original Start Date", coo.customer_code                       as "Proj Owning Org Code", coo.customer_name                       as "Proj Owning Org Name", proj.percent_complete                   as "Percent Complete", proj.pct_complete_rule                  as "Percent Complete Rule", proj.exp_sub_po_required                as "Exp Sub PO Reqd", proj.ts_sub_po_required                 as "Ts Sub PO Reqd", pg.posting_group_name                   as "Posting Group Name", proj.probability_percent                as "Probability Percent", proj.use_labor_category                 as "Use Labor Category", proj.proj_require_time_comments         as "Proj Require Time Comments", proj.rev_end_date                       as "Rev End Date", proj.rev_start_date                     as "Rev Start Date", proj.self_assign_plans                  as "Self Assign Plans", proj.allow_self_plan                    as "Allow Self Plan", proj.assignment_flag                    as "Assignment Flag", ps.status                               as "Status", proj.ts_task_required                   as "Ts Task Reqd", proj.title                              as "Title", proj.tito_required                      as "Tito Reqd", coalesce(proj.total_value, proj.orig_total_value)         as "Total Value", pt.project_type                         as "Project Type", proj.user01                             as "Proj UDF 01", proj.user02                             as "Proj UDF 02", proj.user03                             as "Proj UDF 03", proj.user04                             as "Proj UDF 04", proj.user05                             as "Proj UDF 05", proj.user06                             as "Proj UDF 06", proj.user07                             as "Proj UDF 07", proj.user08                             as "Proj UDF 08", proj.user09                             as "Proj UDF 09", proj.user10                             as "Proj UDF 10", proj.user11                             as "Proj UDF 11", proj.user12                             as "Proj UDF 12", proj.user13                             as "Proj UDF 13", proj.user14                             as "Proj UDF 14", proj.user15                             as "Proj UDF 15", proj.user16                             as "Proj UDF 16", proj.user17                             as "Proj UDF 17", proj.user18                             as "Proj UDF 18", proj.user19                             as "Proj UDF 19", proj.user20                             as "Proj UDF 20", proj.orig_total_value					as "Total Value - Original", proj.orig_funded_value					as "Funded Value - Original", cn.contract_code						as "Contract Code", cn.contract_key							as "Contract Key", cn.contract_title 						as "Contract Title", coalesce(mcn.contract_code, cn.contract_code)				as "Master Contract Code", coalesce(mcn.contract_title, cn.contract_title)				as "Master Contract Title", coalesce(proj.total_cost, proj.orig_total_cost)			as "Total Cost - Current", proj.orig_total_cost 					as "Total Cost - Original", coalesce(proj.total_fee, proj.orig_total_fee)			as "Total Fee - Current", proj.orig_total_fee 					as "Total Fee - Original", coalesce(proj.funded_cost, proj.orig_funded_cost)			as "Funded Cost - Current", proj.orig_funded_cost 					as "Funded Cost - Original", coalesce(proj.funded_fee, proj.orig_funded_fee)			as "Funded Fee - Current", proj.orig_funded_fee 					as "Funded Fee - Original",  case when i_s.project_key is null then    'N' else        'Y' end                                     as "Intercompany Effort", i_s.pi_list								as "Intercompany Support", case when ce.code is not null then    concat(concat(cs.cost_structure,'-'),ce.code ) else        null end   									                as "Default Labor Cost Element", proj.created                            as "Project Created Date", fm.fee_method                           as "Project Fee Method", pf.fee_factor                           as "Project Fee Factor", pf.fee_factor_type                      as "Project Fee Factor Type", pf.fixed_fee_amount                     as "Fixed Fee Amount", proj.advanced_costing_flag              as "Advanced Costing Yes or No", ooc.iso_currency_code		              as "Project Owning Org Currency Code" from project proj join                customer                    c   on      c.customer_key = proj.customer_key left outer join     customer                    coo on      coo.customer_key = proj.owning_customer_key left outer join     customer_type               ctp on      ctp.customer_type_key = c.customer_type_key left outer join     billing_type                bt  on      bt.billing_type_key = proj.billing_type_key left outer join     cost_struct                 cs  on      cs.cost_struct_key = proj.cost_struct_key left outer join     location                    loc on      loc.location_key = proj.location_key left outer join     pay_code                    pc  on      pc.pay_code_key = proj.pay_code_key left outer join     project_open_access_view    pra on      pra.project_key = proj.project_key left outer join     project_controller          pcm on      pcm.project_key = proj.project_key and pcm.role_key = 3 and pcm.primary_ind = 'Y' left outer join     project_controller          pcl on      pcl.project_key = proj.project_key and pcl.role_key = 12 and pcl.primary_ind = 'Y' left outer join     project_controller          pcv on      pcv.project_key = proj.project_key and pcv.role_key = 14 and pcv.primary_ind = 'Y' left outer join     posting_group           pg      on      pg.posting_group_key = proj.posting_group_key join                project_status          ps      on      ps.project_status_key = proj.project_status_key join                project_type            pt      on      pt.project_type_key = proj.project_type_key left outer join     person                  perm    on      perm.person_key = pcm.person_key left outer join     person                  perl    on      perl.person_key = pcl.person_key left outer join     person                  perv    on      perv.person_key = pcv.person_key left outer join     org_tree                ot      on      ot.node_key = proj.customer_key left outer join     customer                col     on      col.customer_key = coo.legal_entity_key left outer join     customer                cle     on      cle.customer_key = col.customer_key left outer join 	contract				cn 		on 		cn.contract_key = proj.contract_key left outer join 	contract				mcn 	on 		cn.prime_contract_key = mcn.contract_key  left outer join 	intercompany_support    i_s		on		i_s.project_key = proj.project_key left outer join		cost_struct_labor 		csl		on 		csl.cost_struct_labor_key = proj.ic_cost_struct_labor_key left outer join 	cost_element			    ce 		on 		ce.cost_element_key = csl.cost_element_key left outer join   project_fee           pf    on    pf.project_key = proj.project_key and pf.fee_method_key in ( select pfi.fee_method_key as fee_method_key from project_fee pfi inner join fee_method fmi on fmi.fee_method_key = pfi.fee_method_key and pfi.project_key  = proj.project_key order by fmi.fee_method asc fetch first 1 row only ) left outer join     fee_method fm on fm.fee_method_key = pf.fee_method_key left outer join     currency_code               ooc on      ooc.currency_code_key = coo.currency_code_key where  (exists (select 'x' from member where person_key = '3896' and role_key IN (1,21)))   or exists ( select 'x' from project_controller pc where pc.project_key = proj.project_key and pc.person_key = '3896' and pc.role_key in (3, 14, 19, 20, 15, 18, 17) )  or exists ( select 'x' from project_controller pc join alternate a on a.person_key = pc.person_key and a.role_key = pc.role_key where pc.project_key = proj.project_key and pc.primary_ind = 'Y' and a.alternate_key = '3896' and pc.role_key in (3, 14, 19, 20, 15, 18, 17) )  or ( exists ( select pra.project_key from project_open_access_view pra where pra.billing_viewer_open = 'Y' and pra.project_key = proj.project_key ) and ( exists ( select 'x' from org_access_person oap where oap.global_access = 'Y' and oap.person_key = '3896' and oap.access_type = 1 and oap.role_key = 20 ) or proj.customer_key in ( select h.customer_key from org_access_hierarchy h join org_access_person oap on oap.org_access_person_key = h.org_access_person_key where oap.person_key = '3896' and oap.access_type = 1 and oap.role_key = 20 ) ) and ( exists ( select 'x' from org_access_person oap where oap.global_access = 'Y' and oap.person_key = '3896' and oap.access_type = 4 and oap.role_key = 20 ) or proj.owning_customer_key in ( select h.customer_key from org_access_hierarchy h join org_access_person oap on oap.org_access_person_key = h.org_access_person_key where oap.person_key = '3896' and oap.access_type = 4 and oap.role_key = 20 ) ) )  or ( exists ( select pra.project_key from project_open_access_view pra where pra.billing_manager_open = 'Y' and pra.project_key = proj.project_key ) and ( exists ( select 'x' from org_access_person oap where oap.global_access = 'Y' and oap.person_key = '3896' and oap.access_type = 1 and oap.role_key = 19 ) or proj.customer_key in ( select h.customer_key from org_access_hierarchy h join org_access_person oap on oap.org_access_person_key = h.org_access_person_key where oap.person_key = '3896' and oap.access_type = 1 and oap.role_key = 19 ) ) and ( exists ( select 'x' from org_access_person oap where oap.global_access = 'Y' and oap.person_key = '3896' and oap.access_type = 4 and oap.role_key = 19 ) or proj.owning_customer_key in ( select h.customer_key from org_access_hierarchy h join org_access_person oap on oap.org_access_person_key = h.org_access_person_key where oap.person_key = '3896' and oap.access_type = 4 and oap.role_key = 19 ) ) )  or ( exists ( select pra.project_key from project_open_access_view pra where pra.project_viewer_open = 'Y' and pra.project_key = proj.project_key ) and ( exists ( select 'x' from org_access_person oap where oap.global_access = 'Y' and oap.person_key = '3896' and oap.access_type = 1 and oap.role_key = 14 ) or proj.customer_key in ( select h.customer_key from org_access_hierarchy h join org_access_person oap on oap.org_access_person_key = h.org_access_person_key where oap.person_key = '3896' and oap.access_type = 1 and oap.role_key = 14 ) ) and ( exists ( select 'x' from org_access_person oap where oap.global_access = 'Y' and oap.person_key = '3896' and oap.access_type = 4 and oap.role_key = 14 ) or proj.owning_customer_key in ( select h.customer_key from org_access_hierarchy h join org_access_person oap on oap.org_access_person_key = h.org_access_person_key where oap.person_key = '3896' and oap.access_type = 4 and oap.role_key = 14 ) ) )  or ( exists ( select pra.project_key from project_open_access_view pra where pra.project_manager_open = 'Y' and pra.project_key = proj.project_key ) and ( exists ( select 'x' from org_access_person oap where oap.global_access = 'Y' and oap.person_key = '3896' and oap.access_type = 1 and oap.role_key = 3 ) or proj.customer_key in ( select h.customer_key from org_access_hierarchy h join org_access_person oap on oap.org_access_person_key = h.org_access_person_key where oap.person_key = '3896' and oap.access_type = 1 and oap.role_key = 3 ) ) and ( exists ( select 'x' from org_access_person oap where oap.global_access = 'Y' and oap.person_key = '3896' and oap.access_type = 4 and oap.role_key = 3 ) or proj.owning_customer_key in ( select h.customer_key from org_access_hierarchy h join org_access_person oap on oap.org_access_person_key = h.org_access_person_key where oap.person_key = '3896' and oap.access_type = 4 and oap.role_key = 3 ) ) )  or ( exists ( select pra.project_key from project_open_access_view pra where pra.resource_planner_open = 'Y' and pra.project_key = proj.project_key ) and ( exists ( select 'x' from org_access_person oap where oap.global_access = 'Y' and oap.person_key = '3896' and oap.access_type = 1 and oap.role_key = 15 ) or proj.customer_key in ( select h.customer_key from org_access_hierarchy h join org_access_person oap on oap.org_access_person_key = h.org_access_person_key where oap.person_key = '3896' and oap.access_type = 1 and oap.role_key = 15 ) ) and ( exists ( select 'x' from org_access_person oap where oap.global_access = 'Y' and oap.person_key = '3896' and oap.access_type = 4 and oap.role_key = 15 ) or proj.owning_customer_key in ( select h.customer_key from org_access_hierarchy h join org_access_person oap on oap.org_access_person_key = h.org_access_person_key where oap.person_key = '3896' and oap.access_type = 4 and oap.role_key = 15 ) ) )  or ( exists ( select pra.project_key from project_open_access_view pra where pra.resource_assigner_open = 'Y' and pra.project_key = proj.project_key ) and ( exists ( select 'x' from org_access_person oap where oap.global_access = 'Y' and oap.person_key = '3896' and oap.access_type = 1 and oap.role_key = 18 ) or proj.customer_key in ( select h.customer_key from org_access_hierarchy h join org_access_person oap on oap.org_access_person_key = h.org_access_person_key where oap.person_key = '3896' and oap.access_type = 1 and oap.role_key = 18 ) ) and ( exists ( select 'x' from org_access_person oap where oap.global_access = 'Y' and oap.person_key = '3896' and oap.access_type = 4 and oap.role_key = 18 ) or proj.owning_customer_key in ( select h.customer_key from org_access_hierarchy h join org_access_person oap on oap.org_access_person_key = h.org_access_person_key where oap.person_key = '3896' and oap.access_type = 4 and oap.role_key = 18 ) ) )  or ( exists ( select pra.project_key from project_open_access_view pra where pra.resource_requestor_open = 'Y' and pra.project_key = proj.project_key ) and ( exists ( select 'x' from org_access_person oap where oap.global_access = 'Y' and oap.person_key = '3896' and oap.access_type = 1 and oap.role_key = 17 ) or proj.customer_key in ( select h.customer_key from org_access_hierarchy h join org_access_person oap on oap.org_access_person_key = h.org_access_person_key where oap.person_key = '3896' and oap.access_type = 1 and oap.role_key = 17 ) ) and ( exists ( select 'x' from org_access_person oap where oap.global_access = 'Y' and oap.person_key = '3896' and oap.access_type = 4 and oap.role_key = 17 ) or proj.owning_customer_key in ( select h.customer_key from org_access_hierarchy h join org_access_person oap on oap.org_access_person_key = h.org_access_person_key where oap.person_key = '3896' and oap.access_type = 4 and oap.role_key = 17 ) ) ) or exists ( select 'x' from project_controller pc where pc.project_key = proj.project_key and pc.person_key = '3896' and pc.role_key in (12, 13) )  or exists ( select 'x' from project_controller pc join alternate a on a.person_key = pc.person_key and a.role_key = pc.role_key where pc.project_key = proj.project_key and pc.primary_ind = 'Y' and a.alternate_key = '3896' and pc.role_key in (12, 13) ) 
) wrE6 ON (
	wrE19."Project Key" = wrE6."Project Key"
)
WHERE 
	(wrE6."Status" LIKE '%Open%' AND wrE6."Proj Billing Type Code" IN ('TM','FP','CP') AND wrE19."Transaction Date" >= '2025-01-01 00:00:00.000')
GROUP BY 
	CONCAT(wrE19."Project Org Code", ' ', wrE19."Project Code"),
	CONCAT(wrE19."Task Number", ' ', wrE19."Task Name")
ORDER BY 
	CONCAT(wrE19."Project Org Code", ' ', wrE19."Project Code") ASC, CONCAT(wrE19."Task Number", ' ', wrE19."Task Name") ASC